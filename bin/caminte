#!/usr/bin/env node

var program = require('commander');
var readline = require('readline');
var mkdirp = require('mkdirp');
var _ = require('underscore');
var os = require('os');
var fs = require('fs');
var path = require('path');
var child = require('child_process');
var exec = child.exec;
var inflection = require('../lib/inflection');
var pkg = require('../package.json');
var version = pkg.version;

function list(val) {
    return val.split(' ').map(String);
}

// CLI
program
    .version(version)
    .usage('[options] [name]')
    .option('-i, --init', 'create config')
    .option('-a, --adapter', 'database adapter (mysql|redis|etc...)')
    .option('-m, --model <modelname>', 'generate data model')
    .option('-r, --route <routename>', 'generate data routes')
    .option('-c, --crud <crudname>', 'generate data crud')
    .option('-p, --parse <dumpfile>', 'generate data crud')
    .option('-f, --force', 'force on non-empty directory')
    .parse(process.argv);


// Path
var destination_path = './';

// end-of-line code

var eol = os.EOL;

// Adapter
if (!program.adapter) {
    program.adapter = 'sqlite3';
}

if (!program.init && !program.model
    && !program.route && !program.crud
    && !program.parse) {
    program.help();
}

if (program.init) {
    checkIsProject(destination_path);
    createApplication(destination_path);
}

if (program.model) {
    program.model = program.model.toLowerCase().singularize();
    destination_path += 'models';
    createModel(destination_path);
}

if (program.route) {
    program.route = program.route.toLowerCase().pluralize();
    destination_path += 'routes';
    createRoute(destination_path);
}

if (program.crud) {
    program.crud = program.crud.toLowerCase().pluralize();
    createRoute(destination_path + 'routes', function () {
        createModel(destination_path + 'models');
    });
}

if (program.parse) {

}

var ctr = fs.readFileSync(__dirname + '/../templates/controller.ejs', 'utf-8');
var mdl = fs.readFileSync(__dirname + '/../templates/model.ejs', 'utf-8');
var cfg = fs.readFileSync(__dirname + '/../templates/database.ejs', 'utf-8');
var mds = fs.readFileSync(__dirname + '/../templates/models.ejs', 'utf-8');

var ctrTemplate = _.template(ctr);
var modelTemplate = _.template(mdl);
var modelsTemplate = _.template(mds);
var cfgTemplate = _.template(cfg);

// Create structure
function createApplication(dstpath) {
    emptyDirectory(dstpath, function (empty) {
        if (empty || program.force) {
            createApplicationAt(dstpath);
        } else {
            confirm('destination is not empty, continue? [y/N] ', function (ok) {
                if (ok) {
                    createApplicationAt(dstpath);
                } else {
                    abort('aborting');
                }
            });
        }
    });
}

// Generate Model
function createModel(root, cb) {
    var modelName = (program.model || program.crud).toLowerCase().singularize().capitalize();
    var pathToModel = path.resolve(root + '/' + modelName + '.js');
    existsFile(pathToModel, function (empty) {
        if (!empty || program.force) {
            createModelAt(root, modelName);
            return cb && cb();
        } else {
            confirm('model is exists, continue? [y/N] ', function (ok) {
                if (ok) {
                    createModelAt(root, modelName);
                    return cb && cb();
                } else {
                    abort('aborting');
                }
            });
        }
    });
}

// Generate Route
function createRoute(root, cb) {
    var ctrName = (program.route || program.crud).toLowerCase().pluralize();
    var pathToCtr = path.resolve(root + '/' + ctrName + '.js');
    existsFile(pathToCtr, function (empty) {
        if (!empty || program.force) {
            createCtrAt(root, ctrName);
            return cb && cb();
        } else {
            confirm('routes is exists, continue? [y/N] ', function (ok) {
                if (ok) {
                    createCtrAt(root, ctrName);
                    return cb && cb();
                } else {
                    abort('aborting');
                }
            });
        }
    });
}

/**
 * Create model at the given `name`.
 *
 * @param {String} pathToModels
 * @param {String} modelName
 */
function createModelAt(pathToModels, modelName) {
    mkdir(pathToModels);
    var modelFile = path.normalize(pathToModels + '/' + modelName + '.js');
    var fields = parseFields();
    var modelFileData = modelTemplate({
        modelName: modelName,
        fields: fields.join(',\n'),
        tableName: modelName.toLowerCase()
    });
    write(modelFile, modelFileData);
}

/**
 * Create route at the given `name`.
 *
 * @param {String} pathToCtr
 * @param {String} ctrName
 */
function createCtrAt(pathToCtr, ctrName) {
    mkdir(pathToCtr);
    var regexp = '^\\d+$', ctrFile = path.normalize(pathToCtr + '/' + ctrName + '.js');
    var pkgProject = loadPackageJson(path.normalize(pathToCtr + '/../'));
    if ((pkgProject.caminte || {}).adapter) {
        switch (pkgProject.caminte.adapter) {
            case 'mongodb':
            case 'mongoose':
                regexp = '^[A-Za-z0-9]+$';
                break;

        }
    }
    var ctrFileData = ctrTemplate({
        controllerName: ctrName,
        modelName: ctrName.singularize().capitalize(),
        itemName: ctrName.singularize(),
        itemsName: ctrName,
        regexp: regexp
    });
    write(ctrFile, ctrFileData);
}

// parse Fields
function parseFields() {
    var fields = [];
    for (var i in process.argv) {
        if (i > 3) {
            var fdata = process.argv[i].split(':');
            var field = '';
            if (fdata[1]) {
                var type = 'type : String';
                switch ((fdata[1]).toLowerCase()) {
                    case 'int':
                    case 'integer':
                    case 'number':
                        type = 'type : schema.Number';
                        break;
                    case 'double':
                    case 'real':
                        type = 'type : schema.Real';
                        break;
                    case 'bool':
                    case 'boolean':
                    case 'tiny':
                    case 'tinyint':
                        type = 'type : schema.Boolean';
                        break;
                    case 'str':
                    case 'string':
                        type = 'type : schema.String';
                        break;
                    case 'text':
                        type = 'type : schema.Text';
                        break;
                    case 'json':
                        type = 'type : schema.Json';
                        break;
                    case 'date':
                        type = 'type : schema.Date';
                        break;
                    default:
                        type = 'type : schema.String';
                }
                field += type;
            } else {
                field += 'type : schema.String';
            }
            if (fdata[2]) {
                field += ", default : " + fdata[2];
            }
            fields.push('           ' + fdata[0] + ' : { ' + field + ' }');
        }
    }
    return fields;
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(dstpath) {

    process.on('exit', function () {
        console.log();
        console.log('complete');
        console.log();
    });

    var pkgProject = loadPackageJson(dstpath);

    if (pkgProject.caminte) {
        if (pkgProject.caminte.adapter) {
            program.adapter = pkgProject.caminte.adapter;
        } else {
            pkgProject.caminte.adapter = program.adapter;
        }
    } else {
        pkgProject.caminte = {
            adapter: program.adapter
        };
    }

    mkdir(dstpath, function () {
        mkdir(dstpath + 'models');
        mkdir(dstpath + 'routes');

        if (!pkgProject.dependencies['caminte']) {
            pkgProject.dependencies['caminte'] = '>=0.0.40'
        }

        if (!pkgProject.dependencies['underscore']) {
            pkgProject.dependencies['underscore'] = 'latest'
        }

        var dbDriver = program.adapter,
            dbHost = 'localhost',
            dbPort = 3306,
            dbBase = 'test',
            dbUser = 'test',
            dbPass = 'test';

        switch (program.adapter) {
            case 'redis':
                dbPort = 6379;
                break;
            case 'nano':
            case 'couchdb':
                dbDriver = 'nano';
                dbPort = 5984;
                break;
            case 'postgres':
                dbDriver = 'pg';
                dbPort = 5432;
                break;
            case 'rethinkdb':
                dbPort = 28015;
                break;
            case 'mongo':
            case 'mongodb':
                dbDriver = 'mongodb';
                dbPort = 27017;
                break;
            case 'mongoose':
                dbPort = 27017;
                break;
            case 'tingodb':
                dbPort = '';
                dbUser = '';
                dbPass = '';
                dbBase = './db/test';
                mkdir(dstpath + '/db');
                break;
            case 'sqlite3':
                dbPort = '';
                dbUser = '';
                dbPass = '';
                dbBase = './db/test.db';
                mkdir(dstpath + '/db');
                break;
        }

        if (!pkgProject.dependencies[program.adapter]) {
            pkgProject.dependencies[program.adapter] = 'latest'
        }

        write(dstpath + 'package.json', JSON.stringify(pkgProject, null, 4));
        existsFile(dstpath + 'models.js', function (mexists) {
            if (!mexists) {
                var modelsFileData = modelsTemplate({
                    driver: program.adapter,
                    port: dbPort,
                    host: dbHost,
                    database: dbBase,
                    username: dbUser,
                    password: dbPass
                });
                write(dstpath + 'models.js', modelsFileData, 0755);
            }
            existsFile(dstpath + 'database.js', function (dexists) {
                if (!dexists) {
                    var cfgFileData = cfgTemplate({
                        driver: program.adapter,
                        port: dbPort,
                        host: dbHost,
                        database: dbBase,
                        username: dbUser,
                        password: dbPass
                    });
                    write(dstpath + 'database.js', cfgFileData, 0755);
                }
                process.nextTick(function () {
                    npmInstall(dstpath);
                });
            });
        });
    });
}

/**
 * Sync. Copy file from `source` to `target`.
 *
 * @param {String} source
 * @param {String} target
 */
function copy(source, target) {
    fs.writeFileSync(target, fs.readFileSync(source));
}

/**
 * Copy template from `source` to `target`.
 *
 * @param {String} source
 * @param {String} target
 */
function copy_template(source, target) {
    source = path.join(__dirname, '..', 'templates', source);
    write(target, fs.readFileSync(source, 'utf-8'));
}

/**
 * Copy templates from `source` to `target`.
 *
 * @param {String} source
 * @param {String} target
 */
function copy_templates(tplEngine, target) {
    var source = path.join(__dirname, '..', 'templates', tplEngine);
    var sources = fs.readdirSync(source);
    sources.forEach(function (srcfile) {
        copy_template(tplEngine + '/' + srcfile, target + '/' + srcfile)
    });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} cb
 */
function emptyDirectory(path, cb) {
    fs.readdir(path, function (err, files) {
        if (err && 'ENOENT' !== err.code)
            throw err;
        return cb(!files || !files.length);
    });
}

/**
 * Check if the given file `path` exists.
 *
 * @param {String} path
 * @param {Function} cb
 */
function existsFile(path, cb) {
    fs.exists(path, function (exists) {
        cb(exists);
    });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 * @param {Number} mode
 */
function write(path, str, mode) {
    fs.writeFile(path, str, {mode: mode || 0644});
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} cb
 */
function mkdir(path, cb) {
    existsFile(path, function (exists) {
        if (!exists) {
            mkdirp(path, 0755, function (err) {
                if (err) {
                    throw err;
                }
                console.log('   \033[36mcreate\033[0m : ' + path);
                return cb && cb();
            });
        } else {
            return cb && cb();
        }
    });
}
/**
 * Change dir & npm install
 *
 * @param {String} dstpath
 * @param {Function} cb
 */
function npmInstall(dstpath, cb) {
    process.chdir(dstpath);
    console.log('check dependencies, please wait...');
    exec('npm install',
        function (error, stdout, stderr) {
            if (error !== null) {
                console.log('exec error: ' + error);
            }
            return cb && cb();
        });
}

/**
 * Check if project available.
 *
 * @param {String} str
 */
function checkIsProject(path) {
    existsFile(path + 'package.json', function (exists) {
        if (!exists) {
            abort('package.json not found');
        }
    });
}

function loadPackageJson(dstpath) {
    var pkgFile = fs.readFileSync(dstpath + 'package.json');
    return JSON.parse(pkgFile);
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */
function confirm(msg, callback) {

    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(msg, function (input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
    console.error('\033[31m' + str + '\033[0m');
    process.exit(1);
}
