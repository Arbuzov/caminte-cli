#!/usr/bin/env node

var program = require('commander');
var readline = require('readline');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var child = require('child_process');
var exec = child.exec;
var inflection = require('../lib/inflection');
var pkg = require('../package.json');
var version = pkg.version;

function list(val) {
    return val.split(' ').map(String);
}

// CLI
program
    .version(version)
    .usage('[options] [dir]')
    .option('-i, --init', 'create configs')
    .option('-a, --adapter', 'database adapter (mysql|redis|etc...)')
    .option('-g, --generate <modelname>', 'generate data model')
    .option('-p, --prefix [prefixname]', 'change uri prefix, defaults is "api"', 'api')
    .option('-f, --force', 'force on non-empty directory')
    .parse(process.argv);


// Path
var destination_path = './';

// end-of-line code

var eol = os.EOL;

// Template engine

if (!program.adapter) {
    program.adapter = 'sqlite3';
}

if (!program.init && !program.generate && !program.server) {
    program.help();
} else if (program.init) {
    checkIsProject(destination_path);
    createApplication(destination_path);
} else if (program.generate) {
    program.generate = program.generate.toLowerCase().singularize();
    destination_path += 'models';
    createModel(destination_path);
}

function load_template(name) {
    return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}
/*
 var index = load_template('js/routes/index.js');
 var rest = load_template('js/routes/rest.js');
 */
var cfg = fs.readFileSync(__dirname + '/../templates/database.js', 'utf-8');

// Generate application
function createApplication(dstpath) {
    emptyDirectory(dstpath, function (empty) {
        if (empty || program.force) {
            createApplicationAt(dstpath);
        } else {
            confirm('destination is not empty, continue? [y/N] ', function (ok) {
                if (ok) {
                    process.stdin.destroy();
                    createApplicationAt(dstpath);
                } else {
                    abort('aborting');
                }
            });
        }
    });
}

// Generate Model
function createModel(root) {
    var modelName = program.generate.toLowerCase().capitalize();
    var pathToModel = path.resolve(root + '/' + modelName + '.js');
    existsFile(pathToModel, function (empty) {
        if (!empty || program.force) {
            createModelAt(root, modelName);
        } else {
            confirm('model is exists, continue? [y/N] ', function (ok) {
                if (ok) {
                    process.stdin.destroy();
                    createModelAt(root, modelName);
                } else {
                    abort('aborting');
                }
            });
        }
    });
}

/**
 * Create model at the given `name`.
 *
 * @param {String} pathToModels
 * @param {String} modelName
 */
function createModelAt(pathToModels, modelName) {
    mkdir(pathToModels);
    var modelFile = path.normalize(pathToModels + '/' + modelName + '.js');
    var modelTemplate = fs.readFileSync(__dirname + '/../templates/model/Model.ejs', 'utf-8');
    var fields = parseFields();
    modelTemplate = modelTemplate.replace('{fields}', fields.join(',\n'));
    modelTemplate = modelTemplate.replace(/{name}/gi, modelName);
    modelTemplate = modelTemplate.replace('{nameToLowerCase}', modelName.toLowerCase());
    write(modelFile, modelTemplate);
}

// parse Fields
function parseFields() {
    var fields = [];
    for (var i in process.argv) {
        // Skip the first two - Node and app.js path
        if (i > 3) {
            var fdata = process.argv[i].split(':');
            var field = '';
            if (fdata[1]) {
                var type = 'type : String';
                switch ((fdata[1]).toLowerCase()) {
                    case 'int':
                    case 'integer':
                    case 'number':
                        type = 'type : schema.Number';
                        break;
                    case 'double':
                    case 'real':
                        type = 'type : schema.Real';
                        break;
                    case 'bool':
                    case 'boolean':
                    case 'tiny':
                    case 'tinyint':
                        type = 'type : schema.Boolean';
                        break;
                    case 'str':
                    case 'string':
                        type = 'type : schema.String';
                        break;
                    case 'text':
                        type = 'type : schema.Text';
                        break;
                    case 'json':
                        type = 'type : schema.Json';
                        break;
                    default:
                        type = 'type : schema.String';
                }
                field += type;
            } else {
                field += 'type : schema.String';
            }
            if (fdata[2]) {
                field += ", 'default' : " + fdata[2];
            }
            fields.push('           ' + fdata[0] + ' : { ' + field + ' }');
        }
    }
    return fields;
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(dstpath) {
    /*
     process.on('exit', function () {
     console.log();
     console.log('   run the app:');
     console.log();
     });
     */
    var pkgFile = fs.readFileSync(dstpath + 'package.json');
    var pkgProject = JSON.parse(pkgFile);

    if (pkgProject.caminte) {
        if (pkgProject.caminte.adapter) {
            program.adapter = pkgProject.caminte.adapter;
        } else {
            pkgProject.caminte.adapter = program.adapter;
        }
    } else {
        pkgProject.caminte = {
            adapter: program.adapter
        };
    }

    mkdir(dstpath, function () {
        mkdir(dstpath + 'models');
        mkdir(dstpath + 'routes');

        if (!pkgProject.dependencies['caminte']) {
            pkgProject.dependencies['caminte'] = '>=0.0.40'
        }

        if (!pkgProject.dependencies[program.adapter]) {
            pkgProject.dependencies[program.adapter] = 'latest'
        }

        write(dstpath + 'package.json', JSON.stringify(pkgProject, null, 4));

        var dbPort = 3306, dbBase = 'test';
        switch (program.adapter) {
            case 'redis':
                dbPort = 6379;
                break;
            case 'nano':
            case 'couchdb':
                dbPort = 5984;
                break;
            case 'postgres':
                dbPort = 5432;
                break;
            case 'rethinkdb':
                dbPort = 28015;
                break;
            case 'mongo':
            case 'mongodb':
            case 'mongoose':
                dbPort = 27017;
                break;
            case 'tingodb':
                dbPort = 0;
                dbBase = './db/test';
                mkdir(dstpath + '/db');
                break;
            case 'sqlite3':
                dbPort = 0;
                dbBase = './db/test.db';
                mkdir(dstpath + '/db');
                break;
        }
        existsFile(dstpath + 'database.js', function (exists) {
            if (!exists) {
                write(dstpath + 'database.js', cfg, 0755);
            }
            process.nextTick(function () {
                npmInstall(dstpath);
            });
        });
    });
}

/**
 * Sync. Copy file from `source` to `target`.
 *
 * @param {String} source
 * @param {String} target
 */
function copy(source, target) {
    fs.writeFileSync(target, fs.readFileSync(source));
}

/**
 * Copy template from `source` to `target`.
 *
 * @param {String} source
 * @param {String} target
 */
function copy_template(source, target) {
    source = path.join(__dirname, '..', 'templates', source);
    write(target, fs.readFileSync(source, 'utf-8'));
}

/**
 * Copy templates from `source` to `target`.
 *
 * @param {String} source
 * @param {String} target
 */
function copy_templates(tplEngine, target) {
    var source = path.join(__dirname, '..', 'templates', tplEngine);
    var sources = fs.readdirSync(source);
    sources.forEach(function (srcfile) {
        copy_template(tplEngine + '/' + srcfile, target + '/' + srcfile)
    });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} cb
 */
function emptyDirectory(path, cb) {
    fs.readdir(path, function (err, files) {
        if (err && 'ENOENT' !== err.code)
            throw err;
        return cb(!files || !files.length);
    });
}

/**
 * Check if the given file `path` exists.
 *
 * @param {String} path
 * @param {Function} cb
 */
function existsFile(path, cb) {
    fs.exists(path, function (exists) {
        cb(exists);
    });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 * @param {Number} mode
 */
function write(path, str, mode) {
    fs.writeFile(path, str, {mode: mode || 0644});
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} cb
 */
function mkdir(path, cb) {
    existsFile(path, function (exists) {
        if (!exists) {
            mkdirp(path, 0755, function (err) {
                if (err) {
                    throw err;
                }
                console.log('   \033[36mcreate\033[0m : ' + path);
                return cb && cb();
            });
        } else {
            return cb && cb();
        }
    });
}
/**
 * Change dir & npm install
 *
 * @param {String} dstpath
 * @param {Function} cb
 */
function npmInstall(dstpath, cb) {
    process.chdir(dstpath);
    console.log('check dependencies, please wait...');
    exec('npm install',
        function (error, stdout, stderr) {
            if (error !== null) {
                console.log('exec error: ' + error);
            }
            return cb && cb();
        });
}

/**
 * Check if project available.
 *
 * @param {String} str
 */
function checkIsProject(path) {
    existsFile(path + 'package.json', function (exists) {
        if (!exists) {
            abort('package.json not found');
        }
    });
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */
function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(msg, function (input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
    console.error('\033[31m' + str + '\033[0m');
    process.exit(1);
}
