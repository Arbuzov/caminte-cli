/**
 *  <%- controllerName %> Routes
 *
 *  Created by create caminte-cli script
 *  App based on CaminteJS
 *  CaminteJS homepage http://www.camintejs.com
 **/
var _ = require('underscore');
var express = require('express');
var router = express.Router({mergeParams: true});
var middleware;

/* params router level */
router.param('id', function (req, res, next, id) {
   if (/<%- regexp %>/.test(id)) {
      next();
   } else {
      next('route');
   }
});

/* middleware router level */
if (middleware) {
   router.use(middleware);
}

/**
* Index action, returns a list either
* Default mapping to GET '~/<%- itemsName %>'
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.get('/', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    var query = req.query;
    var skip = query.skip ? parseInt(query.skip) - 1 : 0;
    var limit = query.limit ? parseInt(query.limit) : 20;

    var opts = {
        skip: skip,
        limit: limit,
        where: {}
    };

    delete query.skip;
    delete query.limit;
    // TODO: it needs implementation for search
    _.extend(opts.where, query);

    <%- modelName %>.all(opts, function (err, <%- itemsName %>) {
        if (err) {
            res.status(400);
            return res.json({
                code: err.code || 400,
                message: err.message || err
            });
        }
        res.status(200);
        res.json(<%- itemsName %>);
    });
});

/**
 * Count items action, returns amount of <%- itemName %>
 * Default mapping to GET '~/<%- itemsName %>/count'
 *
 * @param {Object} req
 * @param {Object} res
 * @param {Function} next
 **/
router.get('/count', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    var query = req.query;

    var opts = {
        where: {}
    };

    // TODO: it needs implementation
    _.extend(opts.where, query);

    <%- modelName %>.count(opts.where, function (err, count) {
        if (err) {
            res.status(400);
            return res.json({
                code: err.code || 400,
                message: err.message || err
            });
        }
        res.status( 200 );
        res.json( {
                count: count
        });
    });
});

/**
* New action, returns new a single <%- itemName %>
* Default mapping to GET '~/<%- itemsName %>/new'
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.get('/new', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    var <%- itemName %> = new <%- modelName %>(req.query);

    res.status(200);
    res.json(<%- itemName %>.toObject());
});

/**
* Show action, returns shows a single <%- itemName %>
* Default mapping to GET '~/<%- itemsName %>/:id'
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.get('/:id', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    <%- modelName %>.findById(req.params.id, function (err, <%- itemName %>) {
        if (err) {
            res.status(400);
            return res.json({
                code: err.code || 400,
                message: err.message || err
            });
        }
        if (<%- itemName %>) {
            res.status(200);
            res.json(<%- itemName %>.toObject());
        } else {
            res.status(404);
            res.json({
                code: 404,
                message: '<%- itemsName %> not found'
            });
        }
    });
});

/**
* Update action, updates a single <%- itemName %>
* Default mapping to PUT '~/<%- itemsName %>/:id', no GET mapping
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.put('/:id', function (req, res) {
    var query = req.body;
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    <%- modelName %>.findById(req.params.id, function (err, <%- itemName %>) {
        if (err) {
            res.status(400);
            return res.json({
                code: err.code || 400,
                message: err.message || err
            });
        }
        if (<%- itemName %>) {

            _.extend(<%- itemName %>, query);

            <%- itemName %>.isValid(function (isValid) {
                if(isValid) {
                    <%- itemName %>.updateAttributes(req.body, function (err) {
                        if (err) {
                            res.status(400);
                            return res.json({
                                code: err.code || 400,
                                message: err.message || err
                            });
                        }
                        res.status(200);
                        res.json(<%- itemName %>.toObject());
                    });
                } else {
                    res.status(405);
                    return res.json({
                        code: 405,
                        message: <%- itemName %>.errors
                    });
                }
            });
        } else {
            res.status(404);
            res.json({
                code: 404,
                message: '<%- itemsName %> not found'
            });
        }
    });
});

/**
* Create action, creates a single <%- itemName %>
* Default mapping to POST '~/<%- itemsName %>', no GET mapping
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.post('/', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    var <%- itemName %> = new <%- modelName %>(req.body);
    <%- itemName %>.isValid(function (isValid) {
        if (!isValid) {
            res.status(400);
            return res.json({
                    code: 400,
                    message: <%- itemName %>.errors
            });
        }

        <%- itemName %>.save(function (err) {
            if (err) {
                res.status(400);
                return res.json({
                    code: err.code || 400,
                    message: err.message || err
                });
            }
            res.status(201);
            res.json(<%- itemName %>.toObject());
        });
    });
});

/**
* Delete action, deletes a single <%- itemName %>
* Default mapping to DEL '~/<%- itemsName %>/:id', no GET mapping
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.delete('/:id', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    <%- modelName %>.findById(req.params.id, function (err, <%- itemName %>) {
        if (err) {
            res.status(400);
            return res.json({
                code: err.code || 400,
                message: err.message || err
            });
        }
        if (!<%- itemName %>) {
            res.status(404);
            return res.json({
                code: 404,
                message: '<%- itemsName %> not found'
            });
        }
        <%- itemName %>.destroy(function (err) {
            if (err) {
                res.status(400);
                return res.json({
                    code: err.code || 400,
                    message: err.message || err
                });
            } else {
                res.status(204);
                res.json({
                    message: '<%- itemsName %> deleted!'
                });
            }
        });
    });
});

/**
* Delete action, deletes a all <%- itemName %>s
* Default mapping to DEL '~/<%- itemsName %>', no GET mapping
*
* @param {Object} req
* @param {Object} res
* @param {Function} next
**/
router.delete('/truncate', function (req, res) {
    var <%- modelName %> = req.app.models.<%- modelName %>Model;
    <%- modelName %>.destroyAll(function (err) {
        if (err) {
            res.status(400);
            return res.json({
                code: err.code || 400,
                message: err.message || err
            });
        } else {
            res.status(204);
            res.json({
                message: 'All <%- itemsName %> deleted'
            });
        }
    });
});

module.exports = router;
